{"version":3,"sources":["components/CurrencySelect.tsx","data/currencyData.ts","models/Currency.tsx","models/CurrencyValue.ts","models/CurrencyAmount.ts","components/CurrencyTable.tsx","components/FromToInput.tsx","components/ValueDeltaInput.tsx","hooks/useApi.ts","hooks/useGetRates.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CurrencySelect","props","id","multiple","size","currencies","value","selected","map","c","alias","onChange","event","Array","from","target","selectedOptions","x","get","values","toOption","currencyData","Currency","name","image","key","this","style","optionStyle","src","imageUrl","alt","backgroundImage","comparator","a","b","localeCompare","Map","currenciesArgs","args","CurrencyValue","currency","CurrencyAmount","base","rate","amount","chaos","Math","ceil","generateRows","CurrencyTableCell","toImg","CopyButton","useState","isClicked","setClicked","handleClick","navigator","clipboard","writeText","text","setTimeout","className","onClick","role","aria-label","CSSTransition","in","timeout","classNames","unmountOnExit","CurrencyTableRow","toFixed","toString","range","start","end","amounts","rates","forEach","heap","Heap","pop","toBaseValue","toValue","next","push","CurrencyTable","rows","setRows","useEffect","sub","pipe","scan","subscribe","error","console","unsubscribe","column","isLoading","TransitionGroup","component","FromToInput","to","handleChange","valueAsNumber","type","placeholder","ValueDeltaInput","delta","baseAlias","defaultParams","league","item","useGetRates","params","data","Object","assign","query","URLSearchParams","url","setData","fetch","then","response","json","catch","useApi","App","ranges","min","max","step","setSelected","setRange","user","Fragment","href","bannerColor","octoColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e684cfa8.chunk.js","sourcesContent":["import React from 'react';\nimport { Currency } from '../models/Currency';\n\nexport interface ICurrencySelectProps {\n    currencies: Map<string, Currency>\n    selected: Currency[]\n    onChange: (currencies: Currency[]) => void\n}\n\nexport default function CurrencySelect(props: ICurrencySelectProps) {\n\n    const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const values = Array.from(event.target.selectedOptions).map(x => x.value);\n        const selected = values.map(alias => props.currencies.get(alias) as Currency);\n        props.onChange(selected);\n    }\n\n    return (\n        <select id=\"include\" multiple={true} size={props.currencies.size} value={props.selected.map(c => c.alias)} onChange={handleChange}>\n            {Array.from(props.currencies.values()).map(c => c.toOption())}\n        </select>\n    );\n}\n","const currencyData: [string, string, string][] = [\n    ['alt', 'Orb of Alteration', 'CurrencyRerollMagic'],\n    ['fuse', 'Orb of Fusing', 'CurrencyRerollSocketLinks'],\n    ['alch', 'Orb of Alchemy', 'CurrencyUpgradeToRare'],\n    ['chaos', 'Chaos Orb', 'CurrencyRerollRare'],\n    ['gcp', 'Gemcutter\\'s Prism', 'CurrencyGemQuality'],\n    ['exa', 'Exalted Orb', 'CurrencyAddModToRare'],\n    ['chrom', 'Chromatic Orb', 'CurrencyRerollSocketColours'],\n    ['jew', 'Jeweller\\'s Orb', 'CurrencyRerollSocketNumbers'],\n    ['chance', 'Orb of Chance', 'CurrencyUpgradeRandomly'],\n    ['chisel', 'Cartographer\\'s Chisel', 'CurrencyMapQuality'],\n    ['scour', 'Orb of Scouring', 'CurrencyConvertToNormal'],\n    ['blessed', 'Blessed Orb', 'CurrencyImplicitMod'],\n    ['regret', 'Orb of Regret', 'CurrencyPassiveSkillRefund'],\n    ['regal', 'Regal Orb', 'CurrencyUpgradeMagicToRare'],\n    ['divine', 'Divine Orb', 'CurrencyModValues']\n];\n\nexport default currencyData;","import React from 'react';\nimport currenciesArgs from '../data/currencyData';\n\nexport class Currency {\n\n    static comparator = (a: Currency, b: Currency) => a.alias.localeCompare(b.alias);\n\n    constructor(\n        public alias: string,\n        public name: string,\n        public image: string\n    ) { }\n\n    get imageUrl(): string {\n        return `https://web.poecdn.com/image/Art/2DItems/Currency/${this.image}.png?scale=1&w=1&h=1`;\n    }\n\n    get optionStyle(): object {\n        return {\n            backgroundImage: `url('${this.imageUrl}')`,\n        }\n    }\n\n    toOption(): JSX.Element {\n        return <option key={this.alias} value={this.alias} style={this.optionStyle}>{this.name}</option>;\n    }\n\n    toImg(): JSX.Element {\n        return <img src={this.imageUrl} alt={this.alias}/>;\n    }\n}\n\nexport const currencies: Map<string, Currency> = new Map(currenciesArgs.map(args => new Currency(...args)).map(c => [c.alias, c]));\n","import { Currency } from './Currency';\n\nexport interface ICurrencyValue {\n    value: number | string\n    currency: Currency\n}\n\nexport class CurrencyValue implements ICurrencyValue {\n    constructor(\n        public value: number,\n        public currency: Currency,\n    ) { }\n\n    toString(): string {\n        return `${this.value} ${this.currency.alias}`;\n    }\n}","import { Currency } from './Currency';\nimport { CurrencyValue } from './CurrencyValue';\n\nexport class CurrencyAmount {\n\n    static comparator = (a: CurrencyAmount, b: CurrencyAmount) => a.chaos - b.chaos || Currency.comparator(a.currency, b.currency);\n\n    constructor(\n        public currency: Currency,\n        public base: Currency,\n        public rate: number,\n        public amount: number = 1\n    ) { }\n\n    get chaos(): number {\n        return this.amount * this.rate;\n    }\n\n    set chaos(value: number) {\n        this.amount = Math.ceil(value / this.rate);\n    }\n\n    next() {\n        this.amount += 1;\n    }\n\n    toBaseValue(): CurrencyValue {\n        return new CurrencyValue(this.chaos, this.base);\n    }\n\n    toValue(): CurrencyValue {\n        return new CurrencyValue(this.amount, this.currency);\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { from } from 'rxjs';\nimport { scan } from 'rxjs/operators';\nimport Heap from 'mnemonist/heap';\nimport { Currency } from '../models/Currency';\nimport { CurrencyAmount } from '../models/CurrencyAmount';\nimport { CurrencyValue, ICurrencyValue } from '../models/CurrencyValue';\n\nfunction CurrencyTableCell(props: ICurrencyValue) {\n    return (\n        <td>{props.value} {props.currency.toImg()} {props.currency.name}</td>\n    );\n}\n\ninterface ICopyButtonProps {\n    text: string;\n}\n\nfunction CopyButton(props: ICopyButtonProps) {\n\n    const [isClicked, setClicked] = useState(false);\n\n    const handleClick = async () => {\n        await navigator.clipboard.writeText(props.text);\n        setClicked(true);\n        setTimeout(() => setClicked(false), 1000);\n    }\n\n    return (\n        <td className=\"copy-button\" onClick={handleClick}>\n            <span role=\"img\" aria-label=\"Copy\">📋</span>\n            <CSSTransition\n                in={isClicked}\n                timeout={200}\n                classNames=\"tooltip\"\n                unmountOnExit>\n                <span className=\"tooltip-text\">copied</span>\n            </CSSTransition>\n        </td>\n    );\n}\n\ninterface ICurrencyTableRowProps {\n    base: CurrencyValue,\n    value: CurrencyValue,\n}\n\nfunction CurrencyTableRow(props: ICurrencyTableRowProps) {\n    return (\n        <tr key={`${props.value.currency.alias}-${props.value.value}`}>\n            <CurrencyTableCell value={props.base.value.toFixed(2)} currency={props.base.currency}/>\n            <CurrencyTableCell {...props.value}/>\n            <CopyButton text={`~price ${props.value.toString()}`}/>\n        </tr>\n    );\n}\n\nexport interface ICurrencyTableProps {\n    isLoading: boolean\n    base: Currency\n    selected: Currency[]\n    range: [number, number]\n    rates: { [s: string]: number }\n}\n\nfunction *generateRows(props: ICurrencyTableProps): IterableIterator<ICurrencyTableRowProps> {\n    const base = props.base;\n    const [start, end] = props.range;\n    const amounts = props.selected.map(currency =>\n        new CurrencyAmount(currency, base, props.rates[currency.alias] as number));\n    if (start !== 0) {\n        amounts.forEach(a => a.chaos = start);\n    }\n\n    const heap = Heap.from(amounts, CurrencyAmount.comparator);\n    while (true) {\n        const amount = heap.pop() as CurrencyAmount;\n\n        if (amount.chaos > end)\n            break;\n\n        yield {\n            base: amount.toBaseValue(),\n            value: amount.toValue(),\n        };\n        amount.next();\n        heap.push(amount);\n    }\n}\n\nexport default function CurrencyTable(props: ICurrencyTableProps) {\n\n    const columns = ['Chaos', 'Currency', ''];\n\n    const [rows, setRows] = useState([] as ICurrencyTableRowProps[]);\n\n    useEffect(() => {\n        const sub = from(generateRows(props)).pipe(\n            scan((rows, value) => [...rows, value], [] as ICurrencyTableRowProps[]),\n        ).subscribe(setRows, error => console.error(error));\n        return () => {\n            sub.unsubscribe();\n            setRows([]);\n        }\n    }, [props]);\n\n    return (\n        <table id=\"currencies\">\n            <thead>\n                <tr>{columns.map(column => (<th key={column}>{column}</th>))}</tr>\n            </thead>\n            {!props.isLoading &&\n            <tbody>\n                <TransitionGroup component={null}>\n                    {rows.map(({ base, value }) => (\n                        <CSSTransition\n                            key={value.toString()}\n                            timeout={300}\n                            classNames=\"row\">\n                                <CurrencyTableRow base={base} value={value}/>\n                        </CSSTransition>\n                    ))}\n                </TransitionGroup>\n            </tbody>}\n        </table>\n    );\n}\n","import React from 'react';\nimport { IRangeProps } from '../data/ranges';\n\nexport interface IFromToInputProps {\n    from: IRangeProps\n    to: IRangeProps\n    range: [number, number]\n    onChange: (range: [number, number]) => void\n}\n\nexport default function FromToInput(props: IFromToInputProps) {\n\n    let [from, to] = props.range;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.id === 'from') {\n            from = event.target.valueAsNumber;\n        } else if (event.target.id === 'to') {\n            to = event.target.valueAsNumber;\n        }\n        props.onChange([from, to]);\n    }\n\n    return (\n        <div className=\"group\">\n            <input type=\"number\" value={from} onChange={handleChange} id=\"from\" placeholder=\"from\" {...props.from} />\n            <span className=\"gap\">&divide;</span>\n            <input type=\"number\" value={to} onChange={handleChange} id=\"to\" placeholder=\"to\" {...props.to} />\n        </div>\n    );\n}\n","import React from 'react';\nimport { IRangeProps } from '../data/ranges';\n\nexport interface IValueDeltaInputProps {\n    value: IRangeProps\n    delta: IRangeProps\n    baseAlias: string\n    range: [number, number]\n    onChange: (range: [number, number]) => void\n}\n\nexport default function ValueDeltaInput(props: IValueDeltaInputProps) {\n\n    const { range: [from, to] } = props;\n    let value = (from + to) / 2;\n    let delta = (to - from) / 2;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.id === 'value') {\n            value = event.target.valueAsNumber;\n        } else if (event.target.id === 'delta') {\n            delta = event.target.valueAsNumber;\n        }\n        const range: [number, number] = [value - delta, value + delta];\n        props.onChange(range);\n    }\n\n    return (\n        <div className=\"group\">\n            <input type=\"number\" value={value} onChange={handleChange} id=\"value\" placeholder={props.baseAlias} {...props.value} />\n            <span className=\"gap\">&plusmn;</span>\n            <input type=\"number\" value={delta} onChange={handleChange} id=\"delta\" placeholder=\"delta\" {...props.delta} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\n\ninterface ApiState {\n    isLoading: boolean\n    data: any\n}\n\nexport const useApi = (url: string) => {\n    const [data, setData] = useState<ApiState>({\n        isLoading: true,\n        data: null,\n    });\n\n    useEffect(() => {\n        setData({\n            isLoading: true,\n            data: null\n        });\n        fetch(url)\n            .then((response: Response) => response.json())\n            .then((data) => {\n                setData({ isLoading: false, data });\n            })\n            .catch(() => {\n                setData({ isLoading: false, data: null });\n            });\n    }, [url]);\n\n    return data;\n};\n","import { useApi } from './useApi';\n\nexport interface IGetRatesParams {\n    user: string;\n    rates?: number[];\n    league?: string;\n    item?: string;\n    lr?: number;\n}\n\nconst defaultParams = {\n    league: 'Standard',\n    item: 'Perandus Coin',\n};\n\nexport const useGetRates = (params: IGetRatesParams) => {\n    const data = Object.assign(defaultParams, params);\n    const query = new URLSearchParams(data as any).toString();\n    const { isLoading, data: rates } = useApi(`https://func-poe.azurewebsites.net/api/GetRates?${query}`);\n    return { isLoading, rates };\n};\n","import React, { useState } from 'react';\nimport GithubCorner from 'react-github-corner';\nimport CurrencySelect from './components/CurrencySelect';\nimport CurrencyTable from './components/CurrencyTable';\nimport FromToInput from './components/FromToInput';\nimport ValueDeltaInput from './components/ValueDeltaInput';\nimport { IRangeProps } from './data/ranges';\nimport { useGetRates } from './hooks/useGetRates';\nimport { currencies, Currency } from './models/Currency';\n\nexport default function App() {\n\n    const ranges: { [key: string]: IRangeProps }  = {\n        value: { min: 0, max: 1000, step: 1 },\n        delta: { min: 0, max: 1, step: 0.1 },\n        from: { min: 0, max: 1000, step: 1 },\n        to: { min: 0, max: 1000, step: 1 },\n    };\n    const base = currencies.get('chaos') as Currency;\n\n    const [selected, setSelected] = useState(Array.from(currencies.values()));\n    const [range, setRange] = useState([0, 1] as [number, number]);\n\n    const { isLoading, rates } = useGetRates({ user: 'nikibobi' });\n\n    return (\n        <React.Fragment>\n        <aside>\n            <CurrencySelect selected={selected} onChange={setSelected} currencies={currencies}/>\n            <ValueDeltaInput range={range} onChange={setRange} value={ranges.value} delta={ranges.delta} baseAlias={base.alias}/>\n            <FromToInput range={range} onChange={setRange} from={ranges.from} to={ranges.to}/>\n        </aside>\n        <section>\n            <CurrencyTable isLoading={isLoading} base={base} selected={selected} range={range} rates={rates}/>\n        </section>\n        <GithubCorner href={'https://github.com/nikibobi/poe'} bannerColor=\"#fff\" octoColor=\"#0b0207\"/>\n        </React.Fragment>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}